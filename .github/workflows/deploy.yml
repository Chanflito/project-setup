name: Deploy to Production

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: tradepal-api

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Generate Prisma Client
      run: npx prisma generate

    - name: Run tests
      run: npm run test

    - name: Build application
      run: npm run build

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}

    - name: Deploy to VM
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.VM_HOST }}
        username: ${{ secrets.VM_USER }}
        key: ${{ secrets.VM_SSH_KEY }}
        port: 22
        script: |
          # Login to GitHub Container Registry
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
          
          # Pull the new image
          docker pull ghcr.io/${{ github.repository_owner }}/tradepal-api:latest
          
          # Navigate to project directory
          cd ~/tradepal
          
          # Stop current containers
          docker-compose -f docker-compose.prod.yml down
          
          # Update image tag in compose file and start
          export IMAGE_TAG=ghcr.io/${{ github.repository_owner }}/tradepal-api:latest
          docker-compose -f docker-compose.prod.yml up -d
          
          # Wait for containers to be ready
          echo "Waiting for containers to start..."
          sleep 30
          
          # Check if deployment was successful
          if docker-compose -f docker-compose.prod.yml ps | grep -q "Up"; then
            echo "Deployment successful"
            # Test API endpoint
            if curl -f http://localhost:8080 > /dev/null 2>&1; then
              echo "API is responding correctly"
              # Clean up old images
              docker image prune -f
            else
              echo "API not responding, checking logs..."
              docker-compose -f docker-compose.prod.yml logs api
            fi
          else
            echo "Deployment failed"
            docker-compose -f docker-compose.prod.yml logs
            exit 1
          fi